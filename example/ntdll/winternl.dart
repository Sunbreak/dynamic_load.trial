// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `winternl.h`.
class winternl {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  winternl(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  winternl.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int NtQuerySystemInformation(
    int SystemInformationClass,
    ffi.Pointer<ffi.Void> SystemInformation,
    int SystemInformationLength,
    ffi.Pointer<ffi.Uint32> ReturnLength,
  ) {
    return _NtQuerySystemInformation(
      SystemInformationClass,
      SystemInformation,
      SystemInformationLength,
      ReturnLength,
    );
  }

  late final _NtQuerySystemInformation_ptr =
      _lookup<ffi.NativeFunction<c_NtQuerySystemInformation>>(
          'NtQuerySystemInformation');
  late final dart_NtQuerySystemInformation _NtQuerySystemInformation =
      _NtQuerySystemInformation_ptr.asFunction<dart_NtQuerySystemInformation>();
}

typedef c_NtQuerySystemInformation = ffi.Int32 Function(
  ffi.Int32 SystemInformationClass,
  ffi.Pointer<ffi.Void> SystemInformation,
  ffi.Uint32 SystemInformationLength,
  ffi.Pointer<ffi.Uint32> ReturnLength,
);

typedef dart_NtQuerySystemInformation = int Function(
  int SystemInformationClass,
  ffi.Pointer<ffi.Void> SystemInformation,
  int SystemInformationLength,
  ffi.Pointer<ffi.Uint32> ReturnLength,
);
