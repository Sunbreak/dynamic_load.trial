// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `winternl.h`.
class winternl {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  winternl(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  winternl.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int NtClose(
    ffi.Pointer<ffi.Void> Handle,
  ) {
    return _NtClose(
      Handle,
    );
  }

  late final _NtClose_ptr = _lookup<ffi.NativeFunction<_c_NtClose>>('NtClose');
  late final _dart_NtClose _NtClose = _NtClose_ptr.asFunction<_dart_NtClose>();

  int NtCreateFile(
    ffi.Pointer<ffi.Pointer<ffi.Void>> FileHandle,
    int DesiredAccess,
    ffi.Pointer<OBJECT_ATTRIBUTES> ObjectAttributes,
    ffi.Pointer<IO_STATUS_BLOCK> IoStatusBlock,
    ffi.Pointer<LARGE_INTEGER> AllocationSize,
    int FileAttributes,
    int ShareAccess,
    int CreateDisposition,
    int CreateOptions,
    ffi.Pointer<ffi.Void> EaBuffer,
    int EaLength,
  ) {
    return _NtCreateFile(
      FileHandle,
      DesiredAccess,
      ObjectAttributes,
      IoStatusBlock,
      AllocationSize,
      FileAttributes,
      ShareAccess,
      CreateDisposition,
      CreateOptions,
      EaBuffer,
      EaLength,
    );
  }

  late final _NtCreateFile_ptr =
      _lookup<ffi.NativeFunction<_c_NtCreateFile>>('NtCreateFile');
  late final _dart_NtCreateFile _NtCreateFile =
      _NtCreateFile_ptr.asFunction<_dart_NtCreateFile>();

  int NtOpenFile(
    ffi.Pointer<ffi.Pointer<ffi.Void>> FileHandle,
    int DesiredAccess,
    ffi.Pointer<OBJECT_ATTRIBUTES> ObjectAttributes,
    ffi.Pointer<IO_STATUS_BLOCK> IoStatusBlock,
    int ShareAccess,
    int OpenOptions,
  ) {
    return _NtOpenFile(
      FileHandle,
      DesiredAccess,
      ObjectAttributes,
      IoStatusBlock,
      ShareAccess,
      OpenOptions,
    );
  }

  late final _NtOpenFile_ptr =
      _lookup<ffi.NativeFunction<_c_NtOpenFile>>('NtOpenFile');
  late final _dart_NtOpenFile _NtOpenFile =
      _NtOpenFile_ptr.asFunction<_dart_NtOpenFile>();

  int NtRenameKey(
    ffi.Pointer<ffi.Void> KeyHandle,
    ffi.Pointer<UNICODE_STRING> NewName,
  ) {
    return _NtRenameKey(
      KeyHandle,
      NewName,
    );
  }

  late final _NtRenameKey_ptr =
      _lookup<ffi.NativeFunction<_c_NtRenameKey>>('NtRenameKey');
  late final _dart_NtRenameKey _NtRenameKey =
      _NtRenameKey_ptr.asFunction<_dart_NtRenameKey>();

  int NtNotifyChangeMultipleKeys(
    ffi.Pointer<ffi.Void> MasterKeyHandle,
    int Count,
    ffi.Pointer<OBJECT_ATTRIBUTES> SubordinateObjects,
    ffi.Pointer<ffi.Void> Event,
    ffi.Pointer<ffi.NativeFunction<PIO_APC_ROUTINE>> ApcRoutine,
    ffi.Pointer<ffi.Void> ApcContext,
    ffi.Pointer<IO_STATUS_BLOCK> IoStatusBlock,
    int CompletionFilter,
    int WatchTree,
    ffi.Pointer<ffi.Void> Buffer,
    int BufferSize,
    int Asynchronous,
  ) {
    return _NtNotifyChangeMultipleKeys(
      MasterKeyHandle,
      Count,
      SubordinateObjects,
      Event,
      ApcRoutine,
      ApcContext,
      IoStatusBlock,
      CompletionFilter,
      WatchTree,
      Buffer,
      BufferSize,
      Asynchronous,
    );
  }

  late final _NtNotifyChangeMultipleKeys_ptr =
      _lookup<ffi.NativeFunction<_c_NtNotifyChangeMultipleKeys>>(
          'NtNotifyChangeMultipleKeys');
  late final _dart_NtNotifyChangeMultipleKeys _NtNotifyChangeMultipleKeys =
      _NtNotifyChangeMultipleKeys_ptr.asFunction<
          _dart_NtNotifyChangeMultipleKeys>();

  int NtQueryMultipleValueKey(
    ffi.Pointer<ffi.Void> KeyHandle,
    ffi.Pointer<KEY_VALUE_ENTRY> ValueEntries,
    int EntryCount,
    ffi.Pointer<ffi.Void> ValueBuffer,
    ffi.Pointer<ffi.Uint32> BufferLength,
    ffi.Pointer<ffi.Uint32> RequiredBufferLength,
  ) {
    return _NtQueryMultipleValueKey(
      KeyHandle,
      ValueEntries,
      EntryCount,
      ValueBuffer,
      BufferLength,
      RequiredBufferLength,
    );
  }

  late final _NtQueryMultipleValueKey_ptr =
      _lookup<ffi.NativeFunction<_c_NtQueryMultipleValueKey>>(
          'NtQueryMultipleValueKey');
  late final _dart_NtQueryMultipleValueKey _NtQueryMultipleValueKey =
      _NtQueryMultipleValueKey_ptr.asFunction<_dart_NtQueryMultipleValueKey>();

  int NtSetInformationKey(
    ffi.Pointer<ffi.Void> KeyHandle,
    int KeySetInformationClass,
    ffi.Pointer<ffi.Void> KeySetInformation,
    int KeySetInformationLength,
  ) {
    return _NtSetInformationKey(
      KeyHandle,
      KeySetInformationClass,
      KeySetInformation,
      KeySetInformationLength,
    );
  }

  late final _NtSetInformationKey_ptr =
      _lookup<ffi.NativeFunction<_c_NtSetInformationKey>>(
          'NtSetInformationKey');
  late final _dart_NtSetInformationKey _NtSetInformationKey =
      _NtSetInformationKey_ptr.asFunction<_dart_NtSetInformationKey>();

  int NtDeviceIoControlFile(
    ffi.Pointer<ffi.Void> FileHandle,
    ffi.Pointer<ffi.Void> Event,
    ffi.Pointer<ffi.NativeFunction<PIO_APC_ROUTINE>> ApcRoutine,
    ffi.Pointer<ffi.Void> ApcContext,
    ffi.Pointer<IO_STATUS_BLOCK> IoStatusBlock,
    int IoControlCode,
    ffi.Pointer<ffi.Void> InputBuffer,
    int InputBufferLength,
    ffi.Pointer<ffi.Void> OutputBuffer,
    int OutputBufferLength,
  ) {
    return _NtDeviceIoControlFile(
      FileHandle,
      Event,
      ApcRoutine,
      ApcContext,
      IoStatusBlock,
      IoControlCode,
      InputBuffer,
      InputBufferLength,
      OutputBuffer,
      OutputBufferLength,
    );
  }

  late final _NtDeviceIoControlFile_ptr =
      _lookup<ffi.NativeFunction<_c_NtDeviceIoControlFile>>(
          'NtDeviceIoControlFile');
  late final _dart_NtDeviceIoControlFile _NtDeviceIoControlFile =
      _NtDeviceIoControlFile_ptr.asFunction<_dart_NtDeviceIoControlFile>();

  int NtWaitForSingleObject(
    ffi.Pointer<ffi.Void> Handle,
    int Alertable,
    ffi.Pointer<LARGE_INTEGER> Timeout,
  ) {
    return _NtWaitForSingleObject(
      Handle,
      Alertable,
      Timeout,
    );
  }

  late final _NtWaitForSingleObject_ptr =
      _lookup<ffi.NativeFunction<_c_NtWaitForSingleObject>>(
          'NtWaitForSingleObject');
  late final _dart_NtWaitForSingleObject _NtWaitForSingleObject =
      _NtWaitForSingleObject_ptr.asFunction<_dart_NtWaitForSingleObject>();

  int RtlIsNameLegalDOS8Dot3(
    ffi.Pointer<UNICODE_STRING> Name,
    ffi.Pointer<STRING> OemName,
    ffi.Pointer<ffi.Uint8> NameContainsSpaces,
  ) {
    return _RtlIsNameLegalDOS8Dot3(
      Name,
      OemName,
      NameContainsSpaces,
    );
  }

  late final _RtlIsNameLegalDOS8Dot3_ptr =
      _lookup<ffi.NativeFunction<_c_RtlIsNameLegalDOS8Dot3>>(
          'RtlIsNameLegalDOS8Dot3');
  late final _dart_RtlIsNameLegalDOS8Dot3 _RtlIsNameLegalDOS8Dot3 =
      _RtlIsNameLegalDOS8Dot3_ptr.asFunction<_dart_RtlIsNameLegalDOS8Dot3>();

  int RtlNtStatusToDosError(
    int Status,
  ) {
    return _RtlNtStatusToDosError(
      Status,
    );
  }

  late final _RtlNtStatusToDosError_ptr =
      _lookup<ffi.NativeFunction<_c_RtlNtStatusToDosError>>(
          'RtlNtStatusToDosError');
  late final _dart_RtlNtStatusToDosError _RtlNtStatusToDosError =
      _RtlNtStatusToDosError_ptr.asFunction<_dart_RtlNtStatusToDosError>();

  int NtQueryInformationProcess(
    ffi.Pointer<ffi.Void> ProcessHandle,
    int ProcessInformationClass,
    ffi.Pointer<ffi.Void> ProcessInformation,
    int ProcessInformationLength,
    ffi.Pointer<ffi.Uint32> ReturnLength,
  ) {
    return _NtQueryInformationProcess(
      ProcessHandle,
      ProcessInformationClass,
      ProcessInformation,
      ProcessInformationLength,
      ReturnLength,
    );
  }

  late final _NtQueryInformationProcess_ptr =
      _lookup<ffi.NativeFunction<_c_NtQueryInformationProcess>>(
          'NtQueryInformationProcess');
  late final _dart_NtQueryInformationProcess _NtQueryInformationProcess =
      _NtQueryInformationProcess_ptr.asFunction<
          _dart_NtQueryInformationProcess>();

  int NtQueryInformationThread(
    ffi.Pointer<ffi.Void> ThreadHandle,
    int ThreadInformationClass,
    ffi.Pointer<ffi.Void> ThreadInformation,
    int ThreadInformationLength,
    ffi.Pointer<ffi.Uint32> ReturnLength,
  ) {
    return _NtQueryInformationThread(
      ThreadHandle,
      ThreadInformationClass,
      ThreadInformation,
      ThreadInformationLength,
      ReturnLength,
    );
  }

  late final _NtQueryInformationThread_ptr =
      _lookup<ffi.NativeFunction<_c_NtQueryInformationThread>>(
          'NtQueryInformationThread');
  late final _dart_NtQueryInformationThread _NtQueryInformationThread =
      _NtQueryInformationThread_ptr.asFunction<
          _dart_NtQueryInformationThread>();

  int NtQueryObject(
    ffi.Pointer<ffi.Void> Handle,
    int ObjectInformationClass,
    ffi.Pointer<ffi.Void> ObjectInformation,
    int ObjectInformationLength,
    ffi.Pointer<ffi.Uint32> ReturnLength,
  ) {
    return _NtQueryObject(
      Handle,
      ObjectInformationClass,
      ObjectInformation,
      ObjectInformationLength,
      ReturnLength,
    );
  }

  late final _NtQueryObject_ptr =
      _lookup<ffi.NativeFunction<_c_NtQueryObject>>('NtQueryObject');
  late final _dart_NtQueryObject _NtQueryObject =
      _NtQueryObject_ptr.asFunction<_dart_NtQueryObject>();

  int NtQuerySystemInformation(
    int SystemInformationClass,
    ffi.Pointer<ffi.Void> SystemInformation,
    int SystemInformationLength,
    ffi.Pointer<ffi.Uint32> ReturnLength,
  ) {
    return _NtQuerySystemInformation(
      SystemInformationClass,
      SystemInformation,
      SystemInformationLength,
      ReturnLength,
    );
  }

  late final _NtQuerySystemInformation_ptr =
      _lookup<ffi.NativeFunction<_c_NtQuerySystemInformation>>(
          'NtQuerySystemInformation');
  late final _dart_NtQuerySystemInformation _NtQuerySystemInformation =
      _NtQuerySystemInformation_ptr.asFunction<
          _dart_NtQuerySystemInformation>();

  int NtQuerySystemTime(
    ffi.Pointer<LARGE_INTEGER> SystemTime,
  ) {
    return _NtQuerySystemTime(
      SystemTime,
    );
  }

  late final _NtQuerySystemTime_ptr =
      _lookup<ffi.NativeFunction<_c_NtQuerySystemTime>>('NtQuerySystemTime');
  late final _dart_NtQuerySystemTime _NtQuerySystemTime =
      _NtQuerySystemTime_ptr.asFunction<_dart_NtQuerySystemTime>();

  int RtlLocalTimeToSystemTime(
    ffi.Pointer<LARGE_INTEGER> LocalTime,
    ffi.Pointer<LARGE_INTEGER> SystemTime,
  ) {
    return _RtlLocalTimeToSystemTime(
      LocalTime,
      SystemTime,
    );
  }

  late final _RtlLocalTimeToSystemTime_ptr =
      _lookup<ffi.NativeFunction<_c_RtlLocalTimeToSystemTime>>(
          'RtlLocalTimeToSystemTime');
  late final _dart_RtlLocalTimeToSystemTime _RtlLocalTimeToSystemTime =
      _RtlLocalTimeToSystemTime_ptr.asFunction<
          _dart_RtlLocalTimeToSystemTime>();

  int RtlTimeToSecondsSince1970(
    ffi.Pointer<LARGE_INTEGER> Time,
    ffi.Pointer<ffi.Uint32> ElapsedSeconds,
  ) {
    return _RtlTimeToSecondsSince1970(
      Time,
      ElapsedSeconds,
    );
  }

  late final _RtlTimeToSecondsSince1970_ptr =
      _lookup<ffi.NativeFunction<_c_RtlTimeToSecondsSince1970>>(
          'RtlTimeToSecondsSince1970');
  late final _dart_RtlTimeToSecondsSince1970 _RtlTimeToSecondsSince1970 =
      _RtlTimeToSecondsSince1970_ptr.asFunction<
          _dart_RtlTimeToSecondsSince1970>();

  void RtlFreeAnsiString(
    ffi.Pointer<STRING> AnsiString,
  ) {
    return _RtlFreeAnsiString(
      AnsiString,
    );
  }

  late final _RtlFreeAnsiString_ptr =
      _lookup<ffi.NativeFunction<_c_RtlFreeAnsiString>>('RtlFreeAnsiString');
  late final _dart_RtlFreeAnsiString _RtlFreeAnsiString =
      _RtlFreeAnsiString_ptr.asFunction<_dart_RtlFreeAnsiString>();

  void RtlFreeUnicodeString(
    ffi.Pointer<UNICODE_STRING> UnicodeString,
  ) {
    return _RtlFreeUnicodeString(
      UnicodeString,
    );
  }

  late final _RtlFreeUnicodeString_ptr =
      _lookup<ffi.NativeFunction<_c_RtlFreeUnicodeString>>(
          'RtlFreeUnicodeString');
  late final _dart_RtlFreeUnicodeString _RtlFreeUnicodeString =
      _RtlFreeUnicodeString_ptr.asFunction<_dart_RtlFreeUnicodeString>();

  void RtlFreeOemString(
    ffi.Pointer<STRING> OemString,
  ) {
    return _RtlFreeOemString(
      OemString,
    );
  }

  late final _RtlFreeOemString_ptr =
      _lookup<ffi.NativeFunction<_c_RtlFreeOemString>>('RtlFreeOemString');
  late final _dart_RtlFreeOemString _RtlFreeOemString =
      _RtlFreeOemString_ptr.asFunction<_dart_RtlFreeOemString>();

  void RtlInitString(
    ffi.Pointer<STRING> DestinationString,
    ffi.Pointer<ffi.Int8> SourceString,
  ) {
    return _RtlInitString(
      DestinationString,
      SourceString,
    );
  }

  late final _RtlInitString_ptr =
      _lookup<ffi.NativeFunction<_c_RtlInitString>>('RtlInitString');
  late final _dart_RtlInitString _RtlInitString =
      _RtlInitString_ptr.asFunction<_dart_RtlInitString>();

  int RtlInitStringEx(
    ffi.Pointer<STRING> DestinationString,
    ffi.Pointer<ffi.Int8> SourceString,
  ) {
    return _RtlInitStringEx(
      DestinationString,
      SourceString,
    );
  }

  late final _RtlInitStringEx_ptr =
      _lookup<ffi.NativeFunction<_c_RtlInitStringEx>>('RtlInitStringEx');
  late final _dart_RtlInitStringEx _RtlInitStringEx =
      _RtlInitStringEx_ptr.asFunction<_dart_RtlInitStringEx>();

  void RtlInitAnsiString(
    ffi.Pointer<STRING> DestinationString,
    ffi.Pointer<ffi.Int8> SourceString,
  ) {
    return _RtlInitAnsiString(
      DestinationString,
      SourceString,
    );
  }

  late final _RtlInitAnsiString_ptr =
      _lookup<ffi.NativeFunction<_c_RtlInitAnsiString>>('RtlInitAnsiString');
  late final _dart_RtlInitAnsiString _RtlInitAnsiString =
      _RtlInitAnsiString_ptr.asFunction<_dart_RtlInitAnsiString>();

  int RtlInitAnsiStringEx(
    ffi.Pointer<STRING> DestinationString,
    ffi.Pointer<ffi.Int8> SourceString,
  ) {
    return _RtlInitAnsiStringEx(
      DestinationString,
      SourceString,
    );
  }

  late final _RtlInitAnsiStringEx_ptr =
      _lookup<ffi.NativeFunction<_c_RtlInitAnsiStringEx>>(
          'RtlInitAnsiStringEx');
  late final _dart_RtlInitAnsiStringEx _RtlInitAnsiStringEx =
      _RtlInitAnsiStringEx_ptr.asFunction<_dart_RtlInitAnsiStringEx>();

  void RtlInitUnicodeString(
    ffi.Pointer<UNICODE_STRING> DestinationString,
    ffi.Pointer<ffi.Uint16> SourceString,
  ) {
    return _RtlInitUnicodeString(
      DestinationString,
      SourceString,
    );
  }

  late final _RtlInitUnicodeString_ptr =
      _lookup<ffi.NativeFunction<_c_RtlInitUnicodeString>>(
          'RtlInitUnicodeString');
  late final _dart_RtlInitUnicodeString _RtlInitUnicodeString =
      _RtlInitUnicodeString_ptr.asFunction<_dart_RtlInitUnicodeString>();

  int RtlAnsiStringToUnicodeString(
    ffi.Pointer<UNICODE_STRING> DestinationString,
    ffi.Pointer<STRING> SourceString,
    int AllocateDestinationString,
  ) {
    return _RtlAnsiStringToUnicodeString(
      DestinationString,
      SourceString,
      AllocateDestinationString,
    );
  }

  late final _RtlAnsiStringToUnicodeString_ptr =
      _lookup<ffi.NativeFunction<_c_RtlAnsiStringToUnicodeString>>(
          'RtlAnsiStringToUnicodeString');
  late final _dart_RtlAnsiStringToUnicodeString _RtlAnsiStringToUnicodeString =
      _RtlAnsiStringToUnicodeString_ptr.asFunction<
          _dart_RtlAnsiStringToUnicodeString>();

  int RtlUnicodeStringToAnsiString(
    ffi.Pointer<STRING> DestinationString,
    ffi.Pointer<UNICODE_STRING> SourceString,
    int AllocateDestinationString,
  ) {
    return _RtlUnicodeStringToAnsiString(
      DestinationString,
      SourceString,
      AllocateDestinationString,
    );
  }

  late final _RtlUnicodeStringToAnsiString_ptr =
      _lookup<ffi.NativeFunction<_c_RtlUnicodeStringToAnsiString>>(
          'RtlUnicodeStringToAnsiString');
  late final _dart_RtlUnicodeStringToAnsiString _RtlUnicodeStringToAnsiString =
      _RtlUnicodeStringToAnsiString_ptr.asFunction<
          _dart_RtlUnicodeStringToAnsiString>();

  int RtlUnicodeStringToOemString(
    ffi.Pointer<STRING> DestinationString,
    ffi.Pointer<UNICODE_STRING> SourceString,
    int AllocateDestinationString,
  ) {
    return _RtlUnicodeStringToOemString(
      DestinationString,
      SourceString,
      AllocateDestinationString,
    );
  }

  late final _RtlUnicodeStringToOemString_ptr =
      _lookup<ffi.NativeFunction<_c_RtlUnicodeStringToOemString>>(
          'RtlUnicodeStringToOemString');
  late final _dart_RtlUnicodeStringToOemString _RtlUnicodeStringToOemString =
      _RtlUnicodeStringToOemString_ptr.asFunction<
          _dart_RtlUnicodeStringToOemString>();

  int RtlUnicodeToMultiByteSize(
    ffi.Pointer<ffi.Uint32> BytesInMultiByteString,
    ffi.Pointer<ffi.Uint16> UnicodeString,
    int BytesInUnicodeString,
  ) {
    return _RtlUnicodeToMultiByteSize(
      BytesInMultiByteString,
      UnicodeString,
      BytesInUnicodeString,
    );
  }

  late final _RtlUnicodeToMultiByteSize_ptr =
      _lookup<ffi.NativeFunction<_c_RtlUnicodeToMultiByteSize>>(
          'RtlUnicodeToMultiByteSize');
  late final _dart_RtlUnicodeToMultiByteSize _RtlUnicodeToMultiByteSize =
      _RtlUnicodeToMultiByteSize_ptr.asFunction<
          _dart_RtlUnicodeToMultiByteSize>();

  int RtlCharToInteger(
    ffi.Pointer<ffi.Int8> String,
    int Base,
    ffi.Pointer<ffi.Uint32> Value,
  ) {
    return _RtlCharToInteger(
      String,
      Base,
      Value,
    );
  }

  late final _RtlCharToInteger_ptr =
      _lookup<ffi.NativeFunction<_c_RtlCharToInteger>>('RtlCharToInteger');
  late final _dart_RtlCharToInteger _RtlCharToInteger =
      _RtlCharToInteger_ptr.asFunction<_dart_RtlCharToInteger>();

  int RtlConvertSidToUnicodeString(
    ffi.Pointer<UNICODE_STRING> UnicodeString,
    ffi.Pointer<ffi.Void> Sid,
    int AllocateDestinationString,
  ) {
    return _RtlConvertSidToUnicodeString(
      UnicodeString,
      Sid,
      AllocateDestinationString,
    );
  }

  late final _RtlConvertSidToUnicodeString_ptr =
      _lookup<ffi.NativeFunction<_c_RtlConvertSidToUnicodeString>>(
          'RtlConvertSidToUnicodeString');
  late final _dart_RtlConvertSidToUnicodeString _RtlConvertSidToUnicodeString =
      _RtlConvertSidToUnicodeString_ptr.asFunction<
          _dart_RtlConvertSidToUnicodeString>();

  int RtlUniform(
    ffi.Pointer<ffi.Uint32> Seed,
  ) {
    return _RtlUniform(
      Seed,
    );
  }

  late final _RtlUniform_ptr =
      _lookup<ffi.NativeFunction<_c_RtlUniform>>('RtlUniform');
  late final _dart_RtlUniform _RtlUniform =
      _RtlUniform_ptr.asFunction<_dart_RtlUniform>();
}

class STRING extends ffi.Struct {
  @ffi.Uint16()
  external int Length;

  @ffi.Uint16()
  external int MaximumLength;

  external ffi.Pointer<ffi.Int8> Buffer;
}

class UNICODE_STRING extends ffi.Struct {
  @ffi.Uint16()
  external int Length;

  @ffi.Uint16()
  external int MaximumLength;

  external ffi.Pointer<ffi.Uint16> Buffer;
}

class CLIENT_ID extends ffi.Struct {
  external ffi.Pointer<ffi.Void> UniqueProcess;

  external ffi.Pointer<ffi.Void> UniqueThread;
}

class LIST_ENTRY extends ffi.Struct {
  external ffi.Pointer<LIST_ENTRY> Flink;

  external ffi.Pointer<LIST_ENTRY> Blink;
}

class PEB_LDR_DATA extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> Reserved1;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Pointer<ffi.Void>> Reserved2;

  external LIST_ENTRY InMemoryOrderModuleList;
}

class LDR_DATA_TABLE_ENTRY extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer<ffi.Void>> Reserved1;

  external LIST_ENTRY InMemoryOrderLinks;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer<ffi.Void>> Reserved2;

  external ffi.Pointer<ffi.Void> DllBase;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer<ffi.Void>> Reserved3;

  external UNICODE_STRING FullDllName;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> Reserved4;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Pointer<ffi.Void>> Reserved5;

  @ffi.Uint32()
  external int TimeDateStamp;
}

class RTL_USER_PROCESS_PARAMETERS extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> Reserved1;

  @ffi.Array.multi([10])
  external ffi.Array<ffi.Pointer<ffi.Void>> Reserved2;

  external UNICODE_STRING ImagePathName;

  external UNICODE_STRING CommandLine;
}

class PEB extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint8> Reserved1;

  @ffi.Uint8()
  external int BeingDebugged;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Uint8> Reserved2;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer<ffi.Void>> Reserved3;

  external ffi.Pointer<PEB_LDR_DATA> Ldr;

  external ffi.Pointer<RTL_USER_PROCESS_PARAMETERS> ProcessParameters;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Pointer<ffi.Void>> Reserved4;

  external ffi.Pointer<ffi.Void> AtlThunkSListPtr;

  external ffi.Pointer<ffi.Void> Reserved5;

  @ffi.Uint32()
  external int Reserved6;

  external ffi.Pointer<ffi.Void> Reserved7;

  @ffi.Uint32()
  external int Reserved8;

  @ffi.Uint32()
  external int AtlThunkSListPtr32;

  @ffi.Array.multi([45])
  external ffi.Array<ffi.Pointer<ffi.Void>> Reserved9;

  @ffi.Array.multi([96])
  external ffi.Array<ffi.Uint8> Reserved10;

  external ffi.Pointer<ffi.NativeFunction<PPS_POST_PROCESS_INIT_ROUTINE>>
      PostProcessInitRoutine;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Uint8> Reserved11;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Pointer<ffi.Void>> Reserved12;

  @ffi.Uint32()
  external int SessionId;
}

class TEB extends ffi.Struct {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.Pointer<ffi.Void>> Reserved1;

  external ffi.Pointer<PEB> ProcessEnvironmentBlock;

  @ffi.Array.multi([399])
  external ffi.Array<ffi.Pointer<ffi.Void>> Reserved2;

  @ffi.Array.multi([1952])
  external ffi.Array<ffi.Uint8> Reserved3;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<ffi.Void>> TlsSlots;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> Reserved4;

  @ffi.Array.multi([26])
  external ffi.Array<ffi.Pointer<ffi.Void>> Reserved5;

  external ffi.Pointer<ffi.Void> ReservedForOle;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> Reserved6;

  external ffi.Pointer<ffi.Void> TlsExpansionSlots;
}

class OBJECT_ATTRIBUTES extends ffi.Struct {
  @ffi.Uint32()
  external int Length;

  external ffi.Pointer<ffi.Void> RootDirectory;

  external ffi.Pointer<UNICODE_STRING> ObjectName;

  @ffi.Uint32()
  external int Attributes;

  external ffi.Pointer<ffi.Void> SecurityDescriptor;

  external ffi.Pointer<ffi.Void> SecurityQualityOfService;
}

class IO_STATUS_BLOCK extends ffi.Struct {
  @ffi.Uint64()
  external int Information;
}

class PROCESS_BASIC_INFORMATION extends ffi.Struct {
  external ffi.Pointer<ffi.Void> Reserved1;

  external ffi.Pointer<PEB> PebBaseAddress;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer<ffi.Void>> Reserved2;

  @ffi.Uint64()
  external int UniqueProcessId;

  external ffi.Pointer<ffi.Void> Reserved3;
}

class unnamedStruct_1 extends ffi.Struct {
  @ffi.Uint32()
  external int LowPart;

  @ffi.Int32()
  external int HighPart;
}

class LARGE_INTEGER extends ffi.Union {
  external unnamedStruct_1 u;

  @ffi.Int64()
  external int QuadPart;
}

class SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION extends ffi.Struct {
  external LARGE_INTEGER IdleTime;

  external LARGE_INTEGER KernelTime;

  external LARGE_INTEGER UserTime;

  @ffi.Array.multi([2])
  external ffi.Array<LARGE_INTEGER> Reserved1;

  @ffi.Uint32()
  external int Reserved2;
}

class SYSTEM_PROCESS_INFORMATION extends ffi.Struct {
  @ffi.Uint32()
  external int NextEntryOffset;

  @ffi.Uint32()
  external int NumberOfThreads;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Uint8> Reserved1;

  external UNICODE_STRING ImageName;

  @ffi.Int32()
  external int BasePriority;

  external ffi.Pointer<ffi.Void> UniqueProcessId;

  external ffi.Pointer<ffi.Void> Reserved2;

  @ffi.Uint32()
  external int HandleCount;

  @ffi.Uint32()
  external int SessionId;

  external ffi.Pointer<ffi.Void> Reserved3;

  @ffi.Uint64()
  external int PeakVirtualSize;

  @ffi.Uint64()
  external int VirtualSize;

  @ffi.Uint32()
  external int Reserved4;

  @ffi.Uint64()
  external int PeakWorkingSetSize;

  @ffi.Uint64()
  external int WorkingSetSize;

  external ffi.Pointer<ffi.Void> Reserved5;

  @ffi.Uint64()
  external int QuotaPagedPoolUsage;

  external ffi.Pointer<ffi.Void> Reserved6;

  @ffi.Uint64()
  external int QuotaNonPagedPoolUsage;

  @ffi.Uint64()
  external int PagefileUsage;

  @ffi.Uint64()
  external int PeakPagefileUsage;

  @ffi.Uint64()
  external int PrivatePageCount;

  @ffi.Array.multi([6])
  external ffi.Array<LARGE_INTEGER> Reserved7;
}

class SYSTEM_THREAD_INFORMATION extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<LARGE_INTEGER> Reserved1;

  @ffi.Uint32()
  external int Reserved2;

  external ffi.Pointer<ffi.Void> StartAddress;

  external CLIENT_ID ClientId;

  @ffi.Int32()
  external int Priority;

  @ffi.Int32()
  external int BasePriority;

  @ffi.Uint32()
  external int Reserved3;

  @ffi.Uint32()
  external int ThreadState;

  @ffi.Uint32()
  external int WaitReason;
}

class SYSTEM_REGISTRY_QUOTA_INFORMATION extends ffi.Struct {
  @ffi.Uint32()
  external int RegistryQuotaAllowed;

  @ffi.Uint32()
  external int RegistryQuotaUsed;

  external ffi.Pointer<ffi.Void> Reserved1;
}

class SYSTEM_BASIC_INFORMATION extends ffi.Struct {
  @ffi.Array.multi([24])
  external ffi.Array<ffi.Uint8> Reserved1;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> Reserved2;

  @ffi.Int8()
  external int NumberOfProcessors;
}

class SYSTEM_TIMEOFDAY_INFORMATION extends ffi.Struct {
  @ffi.Array.multi([48])
  external ffi.Array<ffi.Uint8> Reserved1;
}

class SYSTEM_PERFORMANCE_INFORMATION extends ffi.Struct {
  @ffi.Array.multi([312])
  external ffi.Array<ffi.Uint8> Reserved1;
}

class SYSTEM_EXCEPTION_INFORMATION extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> Reserved1;
}

class SYSTEM_LOOKASIDE_INFORMATION extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> Reserved1;
}

class SYSTEM_INTERRUPT_INFORMATION extends ffi.Struct {
  @ffi.Array.multi([24])
  external ffi.Array<ffi.Uint8> Reserved1;
}

class SYSTEM_POLICY_INFORMATION extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer<ffi.Void>> Reserved1;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint32> Reserved2;
}

abstract class FILE_INFORMATION_CLASS {
  static const int FileDirectoryInformation = 1;
}

abstract class PROCESSINFOCLASS {
  static const int ProcessBasicInformation = 0;
  static const int ProcessDebugPort = 7;
  static const int ProcessWow64Information = 26;
  static const int ProcessImageFileName = 27;
  static const int ProcessBreakOnTermination = 29;
}

abstract class THREADINFOCLASS {
  static const int ThreadIsIoPending = 16;
}

class SYSTEM_CODEINTEGRITY_INFORMATION extends ffi.Struct {
  @ffi.Uint32()
  external int Length;

  @ffi.Uint32()
  external int CodeIntegrityOptions;
}

abstract class SYSTEM_INFORMATION_CLASS {
  static const int SystemBasicInformation = 0;
  static const int SystemPerformanceInformation = 2;
  static const int SystemTimeOfDayInformation = 3;
  static const int SystemProcessInformation = 5;
  static const int SystemProcessorPerformanceInformation = 8;
  static const int SystemInterruptInformation = 23;
  static const int SystemExceptionInformation = 33;
  static const int SystemRegistryQuotaInformation = 37;
  static const int SystemLookasideInformation = 45;
  static const int SystemCodeIntegrityInformation = 103;
  static const int SystemPolicyInformation = 134;
}

abstract class OBJECT_INFORMATION_CLASS {
  static const int ObjectBasicInformation = 0;
  static const int ObjectTypeInformation = 2;
}

class PUBLIC_OBJECT_BASIC_INFORMATION extends ffi.Struct {
  @ffi.Uint32()
  external int Attributes;

  @ffi.Uint32()
  external int GrantedAccess;

  @ffi.Uint32()
  external int HandleCount;

  @ffi.Uint32()
  external int PointerCount;

  @ffi.Array.multi([10])
  external ffi.Array<ffi.Uint32> Reserved;
}

class PUBLIC_OBJECT_TYPE_INFORMATION extends ffi.Struct {
  external UNICODE_STRING TypeName;

  @ffi.Array.multi([22])
  external ffi.Array<ffi.Uint32> Reserved;
}

class KEY_VALUE_ENTRY extends ffi.Struct {
  external ffi.Pointer<UNICODE_STRING> ValueName;

  @ffi.Uint32()
  external int DataLength;

  @ffi.Uint32()
  external int DataOffset;

  @ffi.Uint32()
  external int Type;
}

abstract class KEY_SET_INFORMATION_CLASS {
  static const int KeyWriteTimeInformation = 0;
  static const int KeyWow64FlagsInformation = 1;
  static const int KeyControlFlagsInformation = 2;
  static const int KeySetVirtualizationInformation = 3;
  static const int KeySetDebugInformation = 4;
  static const int KeySetHandleTagsInformation = 5;
  static const int MaxKeySetInfoClass = 6;
}

abstract class WINSTATIONINFOCLASS {
  static const int WinStationInformation = 8;
}

class WINSTATIONINFORMATIONW extends ffi.Struct {
  @ffi.Array.multi([70])
  external ffi.Array<ffi.Uint8> Reserved2;

  @ffi.Uint32()
  external int LogonId;

  @ffi.Array.multi([1140])
  external ffi.Array<ffi.Uint8> Reserved3;
}

const int CODEINTEGRITY_OPTION_ENABLED = 1;

const int CODEINTEGRITY_OPTION_TESTSIGN = 2;

const int CODEINTEGRITY_OPTION_UMCI_ENABLED = 4;

const int CODEINTEGRITY_OPTION_UMCI_AUDITMODE_ENABLED = 8;

const int CODEINTEGRITY_OPTION_UMCI_EXCLUSIONPATHS_ENABLED = 16;

const int CODEINTEGRITY_OPTION_TEST_BUILD = 32;

const int CODEINTEGRITY_OPTION_PREPRODUCTION_BUILD = 64;

const int CODEINTEGRITY_OPTION_DEBUGMODE_ENABLED = 128;

const int CODEINTEGRITY_OPTION_FLIGHT_BUILD = 256;

const int CODEINTEGRITY_OPTION_FLIGHTING_ENABLED = 512;

const int CODEINTEGRITY_OPTION_HVCI_KMCI_ENABLED = 1024;

const int CODEINTEGRITY_OPTION_HVCI_KMCI_AUDITMODE_ENABLED = 2048;

const int CODEINTEGRITY_OPTION_HVCI_KMCI_STRICTMODE_ENABLED = 4096;

const int CODEINTEGRITY_OPTION_HVCI_IUM_ENABLED = 8192;

const int LOGONID_CURRENT = 4294967295;

const int OBJ_INHERIT = 2;

const int OBJ_PERMANENT = 16;

const int OBJ_EXCLUSIVE = 32;

const int OBJ_CASE_INSENSITIVE = 64;

const int OBJ_OPENIF = 128;

const int OBJ_OPENLINK = 256;

const int OBJ_KERNEL_HANDLE = 512;

const int OBJ_FORCE_ACCESS_CHECK = 1024;

const int OBJ_IGNORE_IMPERSONATED_DEVICEMAP = 2048;

const int OBJ_DONT_REPARSE = 4096;

const int OBJ_VALID_ATTRIBUTES = 8178;

const int FILE_SUPERSEDE = 0;

const int FILE_OPEN = 1;

const int FILE_CREATE = 2;

const int FILE_OPEN_IF = 3;

const int FILE_OVERWRITE = 4;

const int FILE_OVERWRITE_IF = 5;

const int FILE_MAXIMUM_DISPOSITION = 5;

const int FILE_DIRECTORY_FILE = 1;

const int FILE_WRITE_THROUGH = 2;

const int FILE_SEQUENTIAL_ONLY = 4;

const int FILE_NO_INTERMEDIATE_BUFFERING = 8;

const int FILE_SYNCHRONOUS_IO_ALERT = 16;

const int FILE_SYNCHRONOUS_IO_NONALERT = 32;

const int FILE_NON_DIRECTORY_FILE = 64;

const int FILE_CREATE_TREE_CONNECTION = 128;

const int FILE_COMPLETE_IF_OPLOCKED = 256;

const int FILE_NO_EA_KNOWLEDGE = 512;

const int FILE_OPEN_REMOTE_INSTANCE = 1024;

const int FILE_RANDOM_ACCESS = 2048;

const int FILE_DELETE_ON_CLOSE = 4096;

const int FILE_OPEN_BY_FILE_ID = 8192;

const int FILE_OPEN_FOR_BACKUP_INTENT = 16384;

const int FILE_NO_COMPRESSION = 32768;

const int FILE_OPEN_REQUIRING_OPLOCK = 65536;

const int FILE_RESERVE_OPFILTER = 1048576;

const int FILE_OPEN_REPARSE_POINT = 2097152;

const int FILE_OPEN_NO_RECALL = 4194304;

const int FILE_OPEN_FOR_FREE_SPACE_QUERY = 8388608;

const int FILE_VALID_OPTION_FLAGS = 16777215;

const int FILE_VALID_PIPE_OPTION_FLAGS = 50;

const int FILE_VALID_MAILSLOT_OPTION_FLAGS = 50;

const int FILE_VALID_SET_FLAGS = 54;

const int FILE_SUPERSEDED = 0;

const int FILE_OPENED = 1;

const int FILE_CREATED = 2;

const int FILE_OVERWRITTEN = 3;

const int FILE_EXISTS = 4;

const int FILE_DOES_NOT_EXIST = 5;

typedef _c_NtClose = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Handle,
);

typedef _dart_NtClose = int Function(
  ffi.Pointer<ffi.Void> Handle,
);

typedef _c_NtCreateFile = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> FileHandle,
  ffi.Uint32 DesiredAccess,
  ffi.Pointer<OBJECT_ATTRIBUTES> ObjectAttributes,
  ffi.Pointer<IO_STATUS_BLOCK> IoStatusBlock,
  ffi.Pointer<LARGE_INTEGER> AllocationSize,
  ffi.Uint32 FileAttributes,
  ffi.Uint32 ShareAccess,
  ffi.Uint32 CreateDisposition,
  ffi.Uint32 CreateOptions,
  ffi.Pointer<ffi.Void> EaBuffer,
  ffi.Uint32 EaLength,
);

typedef _dart_NtCreateFile = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> FileHandle,
  int DesiredAccess,
  ffi.Pointer<OBJECT_ATTRIBUTES> ObjectAttributes,
  ffi.Pointer<IO_STATUS_BLOCK> IoStatusBlock,
  ffi.Pointer<LARGE_INTEGER> AllocationSize,
  int FileAttributes,
  int ShareAccess,
  int CreateDisposition,
  int CreateOptions,
  ffi.Pointer<ffi.Void> EaBuffer,
  int EaLength,
);

typedef _c_NtOpenFile = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> FileHandle,
  ffi.Uint32 DesiredAccess,
  ffi.Pointer<OBJECT_ATTRIBUTES> ObjectAttributes,
  ffi.Pointer<IO_STATUS_BLOCK> IoStatusBlock,
  ffi.Uint32 ShareAccess,
  ffi.Uint32 OpenOptions,
);

typedef _dart_NtOpenFile = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> FileHandle,
  int DesiredAccess,
  ffi.Pointer<OBJECT_ATTRIBUTES> ObjectAttributes,
  ffi.Pointer<IO_STATUS_BLOCK> IoStatusBlock,
  int ShareAccess,
  int OpenOptions,
);

typedef _c_NtRenameKey = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> KeyHandle,
  ffi.Pointer<UNICODE_STRING> NewName,
);

typedef _dart_NtRenameKey = int Function(
  ffi.Pointer<ffi.Void> KeyHandle,
  ffi.Pointer<UNICODE_STRING> NewName,
);

typedef PIO_APC_ROUTINE = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<IO_STATUS_BLOCK>,
  ffi.Uint32,
);

typedef _c_NtNotifyChangeMultipleKeys = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> MasterKeyHandle,
  ffi.Uint32 Count,
  ffi.Pointer<OBJECT_ATTRIBUTES> SubordinateObjects,
  ffi.Pointer<ffi.Void> Event,
  ffi.Pointer<ffi.NativeFunction<PIO_APC_ROUTINE>> ApcRoutine,
  ffi.Pointer<ffi.Void> ApcContext,
  ffi.Pointer<IO_STATUS_BLOCK> IoStatusBlock,
  ffi.Uint32 CompletionFilter,
  ffi.Uint8 WatchTree,
  ffi.Pointer<ffi.Void> Buffer,
  ffi.Uint32 BufferSize,
  ffi.Uint8 Asynchronous,
);

typedef _dart_NtNotifyChangeMultipleKeys = int Function(
  ffi.Pointer<ffi.Void> MasterKeyHandle,
  int Count,
  ffi.Pointer<OBJECT_ATTRIBUTES> SubordinateObjects,
  ffi.Pointer<ffi.Void> Event,
  ffi.Pointer<ffi.NativeFunction<PIO_APC_ROUTINE>> ApcRoutine,
  ffi.Pointer<ffi.Void> ApcContext,
  ffi.Pointer<IO_STATUS_BLOCK> IoStatusBlock,
  int CompletionFilter,
  int WatchTree,
  ffi.Pointer<ffi.Void> Buffer,
  int BufferSize,
  int Asynchronous,
);

typedef _c_NtQueryMultipleValueKey = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> KeyHandle,
  ffi.Pointer<KEY_VALUE_ENTRY> ValueEntries,
  ffi.Uint32 EntryCount,
  ffi.Pointer<ffi.Void> ValueBuffer,
  ffi.Pointer<ffi.Uint32> BufferLength,
  ffi.Pointer<ffi.Uint32> RequiredBufferLength,
);

typedef _dart_NtQueryMultipleValueKey = int Function(
  ffi.Pointer<ffi.Void> KeyHandle,
  ffi.Pointer<KEY_VALUE_ENTRY> ValueEntries,
  int EntryCount,
  ffi.Pointer<ffi.Void> ValueBuffer,
  ffi.Pointer<ffi.Uint32> BufferLength,
  ffi.Pointer<ffi.Uint32> RequiredBufferLength,
);

typedef _c_NtSetInformationKey = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> KeyHandle,
  ffi.Int32 KeySetInformationClass,
  ffi.Pointer<ffi.Void> KeySetInformation,
  ffi.Uint32 KeySetInformationLength,
);

typedef _dart_NtSetInformationKey = int Function(
  ffi.Pointer<ffi.Void> KeyHandle,
  int KeySetInformationClass,
  ffi.Pointer<ffi.Void> KeySetInformation,
  int KeySetInformationLength,
);

typedef _c_NtDeviceIoControlFile = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> FileHandle,
  ffi.Pointer<ffi.Void> Event,
  ffi.Pointer<ffi.NativeFunction<PIO_APC_ROUTINE>> ApcRoutine,
  ffi.Pointer<ffi.Void> ApcContext,
  ffi.Pointer<IO_STATUS_BLOCK> IoStatusBlock,
  ffi.Uint32 IoControlCode,
  ffi.Pointer<ffi.Void> InputBuffer,
  ffi.Uint32 InputBufferLength,
  ffi.Pointer<ffi.Void> OutputBuffer,
  ffi.Uint32 OutputBufferLength,
);

typedef _dart_NtDeviceIoControlFile = int Function(
  ffi.Pointer<ffi.Void> FileHandle,
  ffi.Pointer<ffi.Void> Event,
  ffi.Pointer<ffi.NativeFunction<PIO_APC_ROUTINE>> ApcRoutine,
  ffi.Pointer<ffi.Void> ApcContext,
  ffi.Pointer<IO_STATUS_BLOCK> IoStatusBlock,
  int IoControlCode,
  ffi.Pointer<ffi.Void> InputBuffer,
  int InputBufferLength,
  ffi.Pointer<ffi.Void> OutputBuffer,
  int OutputBufferLength,
);

typedef _c_NtWaitForSingleObject = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Handle,
  ffi.Uint8 Alertable,
  ffi.Pointer<LARGE_INTEGER> Timeout,
);

typedef _dart_NtWaitForSingleObject = int Function(
  ffi.Pointer<ffi.Void> Handle,
  int Alertable,
  ffi.Pointer<LARGE_INTEGER> Timeout,
);

typedef _c_RtlIsNameLegalDOS8Dot3 = ffi.Uint8 Function(
  ffi.Pointer<UNICODE_STRING> Name,
  ffi.Pointer<STRING> OemName,
  ffi.Pointer<ffi.Uint8> NameContainsSpaces,
);

typedef _dart_RtlIsNameLegalDOS8Dot3 = int Function(
  ffi.Pointer<UNICODE_STRING> Name,
  ffi.Pointer<STRING> OemName,
  ffi.Pointer<ffi.Uint8> NameContainsSpaces,
);

typedef _c_RtlNtStatusToDosError = ffi.Uint32 Function(
  ffi.Int32 Status,
);

typedef _dart_RtlNtStatusToDosError = int Function(
  int Status,
);

typedef _c_NtQueryInformationProcess = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ProcessHandle,
  ffi.Int32 ProcessInformationClass,
  ffi.Pointer<ffi.Void> ProcessInformation,
  ffi.Uint32 ProcessInformationLength,
  ffi.Pointer<ffi.Uint32> ReturnLength,
);

typedef _dart_NtQueryInformationProcess = int Function(
  ffi.Pointer<ffi.Void> ProcessHandle,
  int ProcessInformationClass,
  ffi.Pointer<ffi.Void> ProcessInformation,
  int ProcessInformationLength,
  ffi.Pointer<ffi.Uint32> ReturnLength,
);

typedef _c_NtQueryInformationThread = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ThreadHandle,
  ffi.Int32 ThreadInformationClass,
  ffi.Pointer<ffi.Void> ThreadInformation,
  ffi.Uint32 ThreadInformationLength,
  ffi.Pointer<ffi.Uint32> ReturnLength,
);

typedef _dart_NtQueryInformationThread = int Function(
  ffi.Pointer<ffi.Void> ThreadHandle,
  int ThreadInformationClass,
  ffi.Pointer<ffi.Void> ThreadInformation,
  int ThreadInformationLength,
  ffi.Pointer<ffi.Uint32> ReturnLength,
);

typedef _c_NtQueryObject = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> Handle,
  ffi.Int32 ObjectInformationClass,
  ffi.Pointer<ffi.Void> ObjectInformation,
  ffi.Uint32 ObjectInformationLength,
  ffi.Pointer<ffi.Uint32> ReturnLength,
);

typedef _dart_NtQueryObject = int Function(
  ffi.Pointer<ffi.Void> Handle,
  int ObjectInformationClass,
  ffi.Pointer<ffi.Void> ObjectInformation,
  int ObjectInformationLength,
  ffi.Pointer<ffi.Uint32> ReturnLength,
);

typedef _c_NtQuerySystemInformation = ffi.Int32 Function(
  ffi.Int32 SystemInformationClass,
  ffi.Pointer<ffi.Void> SystemInformation,
  ffi.Uint32 SystemInformationLength,
  ffi.Pointer<ffi.Uint32> ReturnLength,
);

typedef _dart_NtQuerySystemInformation = int Function(
  int SystemInformationClass,
  ffi.Pointer<ffi.Void> SystemInformation,
  int SystemInformationLength,
  ffi.Pointer<ffi.Uint32> ReturnLength,
);

typedef _c_NtQuerySystemTime = ffi.Int32 Function(
  ffi.Pointer<LARGE_INTEGER> SystemTime,
);

typedef _dart_NtQuerySystemTime = int Function(
  ffi.Pointer<LARGE_INTEGER> SystemTime,
);

typedef _c_RtlLocalTimeToSystemTime = ffi.Int32 Function(
  ffi.Pointer<LARGE_INTEGER> LocalTime,
  ffi.Pointer<LARGE_INTEGER> SystemTime,
);

typedef _dart_RtlLocalTimeToSystemTime = int Function(
  ffi.Pointer<LARGE_INTEGER> LocalTime,
  ffi.Pointer<LARGE_INTEGER> SystemTime,
);

typedef _c_RtlTimeToSecondsSince1970 = ffi.Uint8 Function(
  ffi.Pointer<LARGE_INTEGER> Time,
  ffi.Pointer<ffi.Uint32> ElapsedSeconds,
);

typedef _dart_RtlTimeToSecondsSince1970 = int Function(
  ffi.Pointer<LARGE_INTEGER> Time,
  ffi.Pointer<ffi.Uint32> ElapsedSeconds,
);

typedef _c_RtlFreeAnsiString = ffi.Void Function(
  ffi.Pointer<STRING> AnsiString,
);

typedef _dart_RtlFreeAnsiString = void Function(
  ffi.Pointer<STRING> AnsiString,
);

typedef _c_RtlFreeUnicodeString = ffi.Void Function(
  ffi.Pointer<UNICODE_STRING> UnicodeString,
);

typedef _dart_RtlFreeUnicodeString = void Function(
  ffi.Pointer<UNICODE_STRING> UnicodeString,
);

typedef _c_RtlFreeOemString = ffi.Void Function(
  ffi.Pointer<STRING> OemString,
);

typedef _dart_RtlFreeOemString = void Function(
  ffi.Pointer<STRING> OemString,
);

typedef _c_RtlInitString = ffi.Void Function(
  ffi.Pointer<STRING> DestinationString,
  ffi.Pointer<ffi.Int8> SourceString,
);

typedef _dart_RtlInitString = void Function(
  ffi.Pointer<STRING> DestinationString,
  ffi.Pointer<ffi.Int8> SourceString,
);

typedef _c_RtlInitStringEx = ffi.Int32 Function(
  ffi.Pointer<STRING> DestinationString,
  ffi.Pointer<ffi.Int8> SourceString,
);

typedef _dart_RtlInitStringEx = int Function(
  ffi.Pointer<STRING> DestinationString,
  ffi.Pointer<ffi.Int8> SourceString,
);

typedef _c_RtlInitAnsiString = ffi.Void Function(
  ffi.Pointer<STRING> DestinationString,
  ffi.Pointer<ffi.Int8> SourceString,
);

typedef _dart_RtlInitAnsiString = void Function(
  ffi.Pointer<STRING> DestinationString,
  ffi.Pointer<ffi.Int8> SourceString,
);

typedef _c_RtlInitAnsiStringEx = ffi.Int32 Function(
  ffi.Pointer<STRING> DestinationString,
  ffi.Pointer<ffi.Int8> SourceString,
);

typedef _dart_RtlInitAnsiStringEx = int Function(
  ffi.Pointer<STRING> DestinationString,
  ffi.Pointer<ffi.Int8> SourceString,
);

typedef _c_RtlInitUnicodeString = ffi.Void Function(
  ffi.Pointer<UNICODE_STRING> DestinationString,
  ffi.Pointer<ffi.Uint16> SourceString,
);

typedef _dart_RtlInitUnicodeString = void Function(
  ffi.Pointer<UNICODE_STRING> DestinationString,
  ffi.Pointer<ffi.Uint16> SourceString,
);

typedef _c_RtlAnsiStringToUnicodeString = ffi.Int32 Function(
  ffi.Pointer<UNICODE_STRING> DestinationString,
  ffi.Pointer<STRING> SourceString,
  ffi.Uint8 AllocateDestinationString,
);

typedef _dart_RtlAnsiStringToUnicodeString = int Function(
  ffi.Pointer<UNICODE_STRING> DestinationString,
  ffi.Pointer<STRING> SourceString,
  int AllocateDestinationString,
);

typedef _c_RtlUnicodeStringToAnsiString = ffi.Int32 Function(
  ffi.Pointer<STRING> DestinationString,
  ffi.Pointer<UNICODE_STRING> SourceString,
  ffi.Uint8 AllocateDestinationString,
);

typedef _dart_RtlUnicodeStringToAnsiString = int Function(
  ffi.Pointer<STRING> DestinationString,
  ffi.Pointer<UNICODE_STRING> SourceString,
  int AllocateDestinationString,
);

typedef _c_RtlUnicodeStringToOemString = ffi.Int32 Function(
  ffi.Pointer<STRING> DestinationString,
  ffi.Pointer<UNICODE_STRING> SourceString,
  ffi.Uint8 AllocateDestinationString,
);

typedef _dart_RtlUnicodeStringToOemString = int Function(
  ffi.Pointer<STRING> DestinationString,
  ffi.Pointer<UNICODE_STRING> SourceString,
  int AllocateDestinationString,
);

typedef _c_RtlUnicodeToMultiByteSize = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> BytesInMultiByteString,
  ffi.Pointer<ffi.Uint16> UnicodeString,
  ffi.Uint32 BytesInUnicodeString,
);

typedef _dart_RtlUnicodeToMultiByteSize = int Function(
  ffi.Pointer<ffi.Uint32> BytesInMultiByteString,
  ffi.Pointer<ffi.Uint16> UnicodeString,
  int BytesInUnicodeString,
);

typedef _c_RtlCharToInteger = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> String,
  ffi.Uint32 Base,
  ffi.Pointer<ffi.Uint32> Value,
);

typedef _dart_RtlCharToInteger = int Function(
  ffi.Pointer<ffi.Int8> String,
  int Base,
  ffi.Pointer<ffi.Uint32> Value,
);

typedef _c_RtlConvertSidToUnicodeString = ffi.Int32 Function(
  ffi.Pointer<UNICODE_STRING> UnicodeString,
  ffi.Pointer<ffi.Void> Sid,
  ffi.Uint8 AllocateDestinationString,
);

typedef _dart_RtlConvertSidToUnicodeString = int Function(
  ffi.Pointer<UNICODE_STRING> UnicodeString,
  ffi.Pointer<ffi.Void> Sid,
  int AllocateDestinationString,
);

typedef _c_RtlUniform = ffi.Uint32 Function(
  ffi.Pointer<ffi.Uint32> Seed,
);

typedef _dart_RtlUniform = int Function(
  ffi.Pointer<ffi.Uint32> Seed,
);

typedef PPS_POST_PROCESS_INIT_ROUTINE = ffi.Void Function();
